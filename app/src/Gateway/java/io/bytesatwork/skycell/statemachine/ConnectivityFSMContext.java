/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ConnectivityFSM.sm
 */
package io.bytesatwork.skycell.statemachine;

public class ConnectivityFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public ConnectivityFSMContext(ConnectivityFSM owner)
    {
        this (owner, ConnectivityFSMMap.OFF);
    }

    public ConnectivityFSMContext(ConnectivityFSM owner, ConnectivityFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void bleOff()
    {
        _transition = "bleOff";
        getState().bleOff(this);
        _transition = "";
        return;
    }

    public void bleOn()
    {
        _transition = "bleOn";
        getState().bleOn(this);
        _transition = "";
        return;
    }

    public void cloudOff()
    {
        _transition = "cloudOff";
        getState().cloudOff(this);
        _transition = "";
        return;
    }

    public void cloudOn()
    {
        _transition = "cloudOn";
        getState().cloudOn(this);
        _transition = "";
        return;
    }

    public void validTime()
    {
        _transition = "validTime";
        getState().validTime(this);
        _transition = "";
        return;
    }

    public void wifiOff()
    {
        _transition = "wifiOff";
        getState().wifiOff(this);
        _transition = "";
        return;
    }

    public void wifiOn()
    {
        _transition = "wifiOn";
        getState().wifiOn(this);
        _transition = "";
        return;
    }

    public ConnectivityFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((ConnectivityFSMState) _state);
    }

    protected ConnectivityFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(ConnectivityFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private ConnectivityFSM _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class ConnectivityFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ConnectivityFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(ConnectivityFSMContext context) {}
        protected void exit(ConnectivityFSMContext context) {}

        protected void bleOff(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void bleOn(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void cloudOff(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void cloudOn(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void validTime(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void wifiOff(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void wifiOn(ConnectivityFSMContext context)
        {
            Default(context);
        }

        protected void Default(ConnectivityFSMContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class ConnectivityFSMMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final ConnectivityFSMMap_OFF OFF =
            new ConnectivityFSMMap_OFF("ConnectivityFSMMap.OFF", 0);
        public static final ConnectivityFSMMap_ON ON =
            new ConnectivityFSMMap_ON("ConnectivityFSMMap.ON", 1);
        public static final ConnectivityFSMMap_WIFI_OFF_BLE_ON WIFI_OFF_BLE_ON =
            new ConnectivityFSMMap_WIFI_OFF_BLE_ON("ConnectivityFSMMap.WIFI_OFF_BLE_ON", 2);
        public static final ConnectivityFSMMap_WIFI_ON_BLE_OFF WIFI_ON_BLE_OFF =
            new ConnectivityFSMMap_WIFI_ON_BLE_OFF("ConnectivityFSMMap.WIFI_ON_BLE_OFF", 3);
        public static final ConnectivityFSMMap_ON_VALID_TIME ON_VALID_TIME =
            new ConnectivityFSMMap_ON_VALID_TIME("ConnectivityFSMMap.ON_VALID_TIME", 4);
        public static final ConnectivityFSMMap_ON_CLOUD ON_CLOUD =
            new ConnectivityFSMMap_ON_CLOUD("ConnectivityFSMMap.ON_CLOUD", 5);
    }

    protected static class ConnectivityFSMMap_Default
        extends ConnectivityFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ConnectivityFSMMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ConnectivityFSMMap_OFF
        extends ConnectivityFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectivityFSMMap_OFF(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ConnectivityFSMContext context)
            {
                ConnectivityFSM ctxt = context.getOwner();

            ctxt.off();
            return;
        }

        @Override
        protected void Default(ConnectivityFSMContext context)
        {

            return;
        }

        @Override
        protected void bleOn(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_OFF_BLE_ON);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void wifiOn(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_ON_BLE_OFF);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ConnectivityFSMMap_ON
        extends ConnectivityFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectivityFSMMap_ON(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ConnectivityFSMContext context)
            {
                ConnectivityFSM ctxt = context.getOwner();

            ctxt.on();
            return;
        }

        @Override
        protected void Default(ConnectivityFSMContext context)
        {

            return;
        }

        @Override
        protected void bleOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_ON_BLE_OFF);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void cloudOn(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.ON_CLOUD);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void wifiOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_OFF_BLE_ON);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ConnectivityFSMMap_WIFI_OFF_BLE_ON
        extends ConnectivityFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectivityFSMMap_WIFI_OFF_BLE_ON(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ConnectivityFSMContext context)
            {
                ConnectivityFSM ctxt = context.getOwner();

            ctxt.wifiOffBleOn();
            return;
        }

        @Override
        protected void Default(ConnectivityFSMContext context)
        {

            return;
        }

        @Override
        protected void bleOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.OFF);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void wifiOn(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.ON);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ConnectivityFSMMap_WIFI_ON_BLE_OFF
        extends ConnectivityFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectivityFSMMap_WIFI_ON_BLE_OFF(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ConnectivityFSMContext context)
            {
                ConnectivityFSM ctxt = context.getOwner();

            ctxt.wifiOnBleOff();
            return;
        }

        @Override
        protected void Default(ConnectivityFSMContext context)
        {

            return;
        }

        @Override
        protected void bleOn(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.ON);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void wifiOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.OFF);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ConnectivityFSMMap_ON_VALID_TIME
        extends ConnectivityFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectivityFSMMap_ON_VALID_TIME(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ConnectivityFSMContext context)
            {
                ConnectivityFSM ctxt = context.getOwner();

            ctxt.startAdvertising();
            return;
        }

        @Override
        protected void exit(ConnectivityFSMContext context)
            {
            ConnectivityFSM ctxt = context.getOwner();

            ctxt.stopAdvertising();
            return;
        }

        @Override
        protected void Default(ConnectivityFSMContext context)
        {

            return;
        }

        @Override
        protected void bleOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_ON_BLE_OFF);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void cloudOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.ON);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void wifiOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_OFF_BLE_ON);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ConnectivityFSMMap_ON_CLOUD
        extends ConnectivityFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ConnectivityFSMMap_ON_CLOUD(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ConnectivityFSMContext context)
            {
                ConnectivityFSM ctxt = context.getOwner();

            ctxt.checkTime();
            return;
        }

        @Override
        protected void Default(ConnectivityFSMContext context)
        {

            return;
        }

        @Override
        protected void bleOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_ON_BLE_OFF);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void cloudOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.ON);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void validTime(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.ON_VALID_TIME);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void wifiOff(ConnectivityFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(ConnectivityFSMMap.WIFI_OFF_BLE_ON);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
