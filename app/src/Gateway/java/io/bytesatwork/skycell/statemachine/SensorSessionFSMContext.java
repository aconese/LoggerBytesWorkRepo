/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SensorSessionFSM.sm
 */
package io.bytesatwork.skycell.statemachine;

public class SensorSessionFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public SensorSessionFSMContext(SensorSessionFSM owner)
    {
        this (owner, SensorSessionFSMMap.WaitConnected);
    }

    public SensorSessionFSMContext(SensorSessionFSM owner, SensorSessionFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void accepted()
    {
        _transition = "accepted";
        getState().accepted(this);
        _transition = "";
        return;
    }

    public void completedData()
    {
        _transition = "completedData";
        getState().completedData(this);
        _transition = "";
        return;
    }

    public void completedExtrema()
    {
        _transition = "completedExtrema";
        getState().completedExtrema(this);
        _transition = "";
        return;
    }

    public void completedStatus()
    {
        _transition = "completedStatus";
        getState().completedStatus(this);
        _transition = "";
        return;
    }

    public void connected()
    {
        _transition = "connected";
        getState().connected(this);
        _transition = "";
        return;
    }

    public void disconnected()
    {
        _transition = "disconnected";
        getState().disconnected(this);
        _transition = "";
        return;
    }

    public void done()
    {
        _transition = "done";
        getState().done(this);
        _transition = "";
        return;
    }

    public void receiveDataPackage()
    {
        _transition = "receiveDataPackage";
        getState().receiveDataPackage(this);
        _transition = "";
        return;
    }

    public void receiveExtremaPackage()
    {
        _transition = "receiveExtremaPackage";
        getState().receiveExtremaPackage(this);
        _transition = "";
        return;
    }

    public void rejected()
    {
        _transition = "rejected";
        getState().rejected(this);
        _transition = "";
        return;
    }

    public void timeout()
    {
        _transition = "timeout";
        getState().timeout(this);
        _transition = "";
        return;
    }

    public SensorSessionFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((SensorSessionFSMState) _state);
    }

    protected SensorSessionFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(SensorSessionFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private SensorSessionFSM _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class SensorSessionFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SensorSessionFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(SensorSessionFSMContext context) {}
        protected void exit(SensorSessionFSMContext context) {}

        protected void accepted(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void completedData(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void completedExtrema(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void completedStatus(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void connected(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void disconnected(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void done(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void receiveDataPackage(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void receiveExtremaPackage(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void rejected(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void timeout(SensorSessionFSMContext context)
        {
            Default(context);
        }

        protected void Default(SensorSessionFSMContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class SensorSessionFSMMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final SensorSessionFSMMap_WaitConnected WaitConnected =
            new SensorSessionFSMMap_WaitConnected("SensorSessionFSMMap.WaitConnected", 0);
        public static final SensorSessionFSMMap_Disconnected Disconnected =
            new SensorSessionFSMMap_Disconnected("SensorSessionFSMMap.Disconnected", 1);
        public static final SensorSessionFSMMap_WaitDisconnect WaitDisconnect =
            new SensorSessionFSMMap_WaitDisconnect("SensorSessionFSMMap.WaitDisconnect", 2);
        public static final SensorSessionFSMMap_WaitStatus WaitStatus =
            new SensorSessionFSMMap_WaitStatus("SensorSessionFSMMap.WaitStatus", 3);
        public static final SensorSessionFSMMap_Status Status =
            new SensorSessionFSMMap_Status("SensorSessionFSMMap.Status", 4);
        public static final SensorSessionFSMMap_DataTransfer DataTransfer =
            new SensorSessionFSMMap_DataTransfer("SensorSessionFSMMap.DataTransfer", 5);
        public static final SensorSessionFSMMap_Completed Completed =
            new SensorSessionFSMMap_Completed("SensorSessionFSMMap.Completed", 6);
        public static final SensorSessionFSMMap_NotResponding NotResponding =
            new SensorSessionFSMMap_NotResponding("SensorSessionFSMMap.NotResponding", 7);
        public static final SensorSessionFSMMap_Connected Connected =
            new SensorSessionFSMMap_Connected("SensorSessionFSMMap.Connected", 8);
        public static final SensorSessionFSMMap_ExtremaTransfer ExtremaTransfer =
            new SensorSessionFSMMap_ExtremaTransfer("SensorSessionFSMMap.ExtremaTransfer", 9);
        public static final SensorSessionFSMMap_WaitData WaitData =
            new SensorSessionFSMMap_WaitData("SensorSessionFSMMap.WaitData", 10);
        public static final SensorSessionFSMMap_WaitExtrema WaitExtrema =
            new SensorSessionFSMMap_WaitExtrema("SensorSessionFSMMap.WaitExtrema", 11);
    }

    protected static class SensorSessionFSMMap_Default
        extends SensorSessionFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SensorSessionFSMMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_WaitConnected
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_WaitConnected(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void connected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Connected);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_Disconnected
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_Disconnected(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_WaitDisconnect
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_WaitDisconnect(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.sendDisconnectRequest();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void timeout(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.NotResponding);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_WaitStatus
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_WaitStatus(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.sendStatusRequest();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void completedStatus(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Status);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void timeout(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_Status
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_Status(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.checkStatus();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void accepted(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitExtrema);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void rejected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_DataTransfer
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_DataTransfer(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.resetTimeout();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void completedData(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Completed);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void receiveDataPackage(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.DataTransfer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void timeout(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_Completed
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_Completed(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.writeToFile();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void done(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_NotResponding
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_NotResponding(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.resetNetwork();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void done(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_Connected
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_Connected(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.checkConnection();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void accepted(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitStatus);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void rejected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_ExtremaTransfer
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_ExtremaTransfer(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.resetTimeout();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void completedExtrema(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitData);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void receiveExtremaPackage(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.ExtremaTransfer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void timeout(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_WaitData
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_WaitData(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.sendDataRequest();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void completedData(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Completed);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void receiveDataPackage(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.DataTransfer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void timeout(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SensorSessionFSMMap_WaitExtrema
        extends SensorSessionFSMMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SensorSessionFSMMap_WaitExtrema(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(SensorSessionFSMContext context)
            {
                SensorSessionFSM ctxt = context.getOwner();

            ctxt.sendExtremaRequest();
            return;
        }

        @Override
        protected void Default(SensorSessionFSMContext context)
        {

            return;
        }

        @Override
        protected void completedExtrema(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitData);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void disconnected(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.Disconnected);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void receiveExtremaPackage(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.ExtremaTransfer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void timeout(SensorSessionFSMContext context)
        {

            (context.getState()).exit(context);
            context.setState(SensorSessionFSMMap.WaitDisconnect);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
